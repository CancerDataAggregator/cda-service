package bio.terra.cda.app.generators;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import bio.terra.cda.app.service.Filter;
import bio.terra.cda.app.service.FilterUtils;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import bio.terra.cda.app.operators.QueryModule;
import bio.terra.cda.generated.model.Query;

/**
 * IncludeCountOptimizationTest
 */
@Tag("unit")
public class IncludeCountOptimizationTest {

  static final Path TEST_FILES = Paths.get("src/test/resources/query");
  private final ObjectMapper objectMapper = new ObjectMapper().registerModule(new QueryModule());
  private final String queryFile = "query-test-primary-disease-site-or-sex-f.json";
  private final String jsonQuery = Files.readString(TEST_FILES.resolve(queryFile));
  private final Query query = objectMapper.readValue(jsonQuery, Query.class);

  public IncludeCountOptimizationTest() throws IOException {
  }

  /**
   * This test will hit the first if statement used for checking for a WHERE
   * statement
   */
  @Test
  void MissingSql() {
    String sqlOg = "";
    EntitySqlGenerator entitySqlGenerator = new EntitySqlGenerator(query, false);
    try {
      Filter filterObj = new Filter(sqlOg, entitySqlGenerator);
      assertThat("This code should have never been hit", equalTo(""));
    } catch (Exception exception) {
      assertThat(exception.getMessage(), equalTo("This query does not contain a where filter"));
    }

  }

  /**
   * Missing where inside of sequel statement
   */
  @Test
  void MissingWhere() {
    String sqlOg = "SELECT count(*) from (SELECT subject.id AS subject_id, subject.species AS species, subject.sex AS sex, subject.race AS race, subject.ethnicity AS ethnicity, subject.days_to_birth AS days_to_birth, subject.vital_status AS vital_status, subject.days_to_death AS days_to_death, subject.cause_of_death AS cause_of_death, json_agg(distinct (subject_identifier.system, subject_identifier.field_name, subject_identifier.value)::system_data) as subject_identifier, json_agg(distinct subject_associated_project.associated_project) AS subject_associated_project FROM subject AS subject  LEFT JOIN subject_researchsubject AS subject_researchsubject ON subject.integer_id_alias = subject_researchsubject.subject_alias  LEFT JOIN researchsubject AS researchsubject ON subject_researchsubject.researchsubject_alias = researchsubject.integer_id_alias  INNER JOIN subject_identifier AS subject_identifier ON subject.id = subject_identifier.subject_id  INNER JOIN subject_associated_project AS subject_associated_project ON subject.id = subject_associated_project.subject_id    ((COALESCE(UPPER(subject.sex), '') LIKE UPPER(:parameter_1)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2))) GROUP BY subject.id,subject.species,subject.sex,subject.race,subject.ethnicity,subject.days_to_birth,subject.vital_status,subject.days_to_death,subject.cause_of_death ORDER BY subject.id asc) as quantify";
    EntitySqlGenerator entitySqlGenerator = new EntitySqlGenerator(query, false);
    try {
      Filter filterObj = new Filter(sqlOg, entitySqlGenerator);
      assertThat("This code should have never been hit", equalTo(""));
    } catch (Exception exception) {
      assertThat(exception.getMessage(), equalTo("This query does not contain a where filter"));
    }

  }

  /**
   * This test the filters Class query optimization
   */
//  @Test
//  void QueryOptimizationUsingFilterClass() {
//    String sqlOg = "SELECT count(*) from (SELECT subject.id AS subject_id, subject.species AS species, subject.sex AS sex, subject.race AS race, subject.ethnicity AS ethnicity, subject.days_to_birth AS days_to_birth, subject.vital_status AS vital_status, subject.days_to_death AS days_to_death, subject.cause_of_death AS cause_of_death, json_agg(distinct (subject_identifier.system, subject_identifier.field_name, subject_identifier.value)::system_data) as subject_identifier, json_agg(distinct subject_associated_project.associated_project) AS subject_associated_project FROM subject AS subject  LEFT JOIN subject_researchsubject AS subject_researchsubject ON subject.integer_id_alias = subject_researchsubject.subject_alias  LEFT JOIN researchsubject AS researchsubject ON subject_researchsubject.researchsubject_alias = researchsubject.integer_id_alias  INNER JOIN subject_identifier AS subject_identifier ON subject.id = subject_identifier.subject_id  INNER JOIN subject_associated_project AS subject_associated_project ON subject.id = subject_associated_project.subject_id WHERE ((COALESCE(UPPER(subject.sex), '') LIKE UPPER(:parameter_1)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2))) GROUP BY subject.id,subject.species,subject.sex,subject.race,subject.ethnicity,subject.days_to_birth,subject.vital_status,subject.days_to_death,subject.cause_of_death ORDER BY subject.id asc) as quantify";
//    String expected = "WITH subject_id_preselect_0 AS (SELECT integer_id_alias FROM subject WHERE (COALESCE(UPPER(sex), '') LIKE UPPER(:parameter_1))), researchsubject_id_preselect_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), subject_researchsubject_id_preselect_1 AS (SELECT subject_alias FROM subject_researchsubject WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1)) SELECT COUNT(DISTINCT(subject_alias)) FROM (SELECT integer_id_alias AS subject_alias FROM subject_id_preselect_0  UNION  SELECT subject_alias  FROM subject_researchsubject_id_preselect_1) as count_result";
//    EntitySqlGenerator entitySqlGenerator = new EntitySqlGenerator(query, false);
//    Filter filterObj = new Filter(sqlOg, entitySqlGenerator);
//    assertThat(filterObj.getIncludeCountQuery(), equalTo(expected));
//  }

  // all public methods need a test

  @Test
  void TestParenthesisSubstring() {

    String q = "((diagnosis.age_at_diagnosis >= :parameter_1) AND ((COALESCE(UPPER(specimen.primary_disease_type), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(diagnosis.method_of_diagnosis), '') LIKE UPPER(:parameter_3)))) GROUP BY file.id,file.label,file.data_category,file.data_type,file.file_format,file.drs_uri,file.byte_size,file.checksum,file.data_modality,file.imaging_modality,file.dbgap_accession_number,file.imaging_series ORDER BY file.id asc) as quantify";
    String expected = "((diagnosis.age_at_diagnosis >= :parameter_1) AND ((COALESCE(UPPER(specimen.primary_disease_type), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(diagnosis.method_of_diagnosis), '') LIKE UPPER(:parameter_3))))";
    String actual = FilterUtils.parenthesisSubString(q);

    assertThat("\"" + actual + "\" not the same as \"" + expected + "\"", actual.equals(expected));

    q = " Country='Mexico'";
    expected = " Country='Mexico'";
    actual = FilterUtils.parenthesisSubString(q);
    assertThat("\"" + actual + "\" not the same as \"" + expected + "\"", actual.equals(expected));
  }
  @Test
  void TestParenthesisCleanup() {

    String q1 = "((a =4)) OR (b=10)";
    String eq1 = "((a =4)) OR (b=10)";

    String q2 = "(((a=4) OR (b=10)))";
    String eq2 = "(a=4) OR (b=10)";

    String q3 = "a=4 OR (b=10)";
    String eq3 = "a=4 OR (b=10)";

    String q4 = "a=4 OR b=10";
    String eq4 = "a=4 OR b=10";

    String q5 = "(((a =4)) OR (b=10))";
    String eq5 = "((a =4)) OR (b=10)";

    String aq1 = FilterUtils.trimExtraneousParentheses(q1);
    String aq2 = FilterUtils.trimExtraneousParentheses(q2);
    String aq3 = FilterUtils.trimExtraneousParentheses(q3);
    String aq4 = FilterUtils.trimExtraneousParentheses(q4);
    String aq5 = FilterUtils.trimExtraneousParentheses(q5);

    assertThat("\"" + aq1 + "\" not the same as \"" + eq1 + "\"", aq1.equals(eq1));
    assertThat("\"" + aq2 + "\" not the same as \"" + eq2 + "\"", aq2.equals(eq2));
    assertThat("\"" + aq3 + "\" not the same as \"" + eq3 + "\"", aq3.equals(eq3));
    assertThat("\"" + aq4 + "\" not the same as \"" + eq4 + "\"", aq4.equals(eq4));
    assertThat("\"" + aq5 + "\" not the same as \"" + eq5 + "\"", aq5.equals(eq5));

  }

  /**
   * For this test, I removed the front Parentheses In the WHERE statement
   * this.joinBuilder.getPath
   * Will return a no, because of the value not appearing in the getTableInfo map
   * by default TableInfo tableinfo = null;
   * so this will return null
   */
//  @Test
//  void FilterContainsParenthesesThrowNullPointerException() {
//    String sqlOg = "SELECT count(*) from (SELECT subject.id AS subject_id, subject.species AS species, subject.sex AS sex, subject.race AS race, subject.ethnicity AS ethnicity, subject.days_to_birth AS days_to_birth, subject.vital_status AS vital_status, subject.days_to_death AS days_to_death, subject.cause_of_death AS cause_of_death, json_agg(distinct (subject_identifier.system, subject_identifier.field_name, subject_identifier.value)::system_data) as subject_identifier, json_agg(distinct subject_associated_project.associated_project) AS subject_associated_project FROM subject AS subject  LEFT JOIN subject_researchsubject AS subject_researchsubject ON subject.integer_id_alias = subject_researchsubject.subject_alias  LEFT JOIN researchsubject AS researchsubject ON subject_researchsubject.researchsubject_alias = researchsubject.integer_id_alias  INNER JOIN subject_identifier AS subject_identifier ON subject.id = subject_identifier.subject_id  INNER JOIN subject_associated_project AS subject_associated_project ON subject.id = subject_associated_project.subject_id  WHERE COALESCE(UPPER(subject.sex))), '') LIKE UPPER(:parameter_1) OR COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2) GROUP BY subject.id,subject.species,subject.sex,subject.race,subject.ethnicity,subject.days_to_birth,subject.vital_status,subject.days_to_death,subject.cause_of_death ORDER BY subject.id asc) as quantify";
//    EntitySqlGenerator entitySqlGenerator = new EntitySqlGenerator(query, false);
//
//    assertThrows(NullPointerException.class, () -> {
//      Filter filterObj = new Filter(sqlOg, entitySqlGenerator);
//    });
//  }
  /**
   * This tests the filters Class query optimization for the subject count query
   */
//  @Test
//  void TestSubjectCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT subject.id AS subject_id, file_subject.file_alias AS file_id, subject_identifier.system AS subject_identifier_system, subject.sex AS sex, subject.race AS race, subject.ethnicity AS ethnicity, subject.cause_of_death AS cause_of_death FROM subject AS subject  LEFT JOIN subject_researchsubject AS subject_researchsubject ON subject.integer_id_alias = subject_researchsubject.subject_alias  LEFT JOIN researchsubject AS researchsubject ON subject_researchsubject.researchsubject_alias = researchsubject.integer_id_alias  LEFT JOIN researchsubject_treatment AS researchsubject_treatment ON researchsubject.integer_id_alias = researchsubject_treatment.researchsubject_alias  LEFT JOIN treatment AS treatment ON researchsubject_treatment.treatment_alias = treatment.integer_id_alias  INNER JOIN file_subject AS file_subject ON subject.integer_id_alias = file_subject.subject_alias  INNER JOIN subject_identifier AS subject_identifier ON subject.integer_id_alias = subject_identifier.subject_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), subject_identifier_system_count as (SELECT row_to_json(subq) AS json_subject_identifier_system FROM (select subject_identifier_system as subject_identifier_system, count(distinct subject_id) as count from flattened_result group by subject_identifier_system) as subq), sex_count as (SELECT row_to_json(subq) AS json_sex FROM (select sex as sex, count(distinct subject_id) as count from flattened_result group by sex) as subq), race_count as (SELECT row_to_json(subq) AS json_race FROM (select race as race, count(distinct subject_id) as count from flattened_result group by race) as subq), ethnicity_count as (SELECT row_to_json(subq) AS json_ethnicity FROM (select ethnicity as ethnicity, count(distinct subject_id) as count from flattened_result group by ethnicity) as subq), cause_of_death_count as (SELECT row_to_json(subq) AS json_cause_of_death FROM (select cause_of_death as cause_of_death, count(distinct subject_id) as count from flattened_result group by cause_of_death) as subq)  select (SELECT COUNT(DISTINCT subject_id) from flattened_result) as subject_id, (SELECT COUNT(DISTINCT file_id) from flattened_result) as file_id, (SELECT array_agg(json_subject_identifier_system) from subject_identifier_system_count) as subject_identifier_system, (SELECT array_agg(json_sex) from sex_count) as sex, (SELECT array_agg(json_race) from race_count) as race, (SELECT array_agg(json_ethnicity) from ethnicity_count) as ethnicity, (SELECT array_agg(json_cause_of_death) from cause_of_death_count) as cause_of_death) AS json";
//    SubjectCountSqlGenerator subjectSqlCountGenerator = new SubjectCountSqlGenerator(query, false);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), subject_treatment_id_preselect_0 AS (SELECT subject_alias FROM treatment AS treatment  INNER JOIN researchsubject_treatment AS researchsubject_treatment ON treatment.integer_id_alias = researchsubject_treatment.treatment_alias INNER JOIN researchsubject AS researchsubject ON researchsubject_treatment.researchsubject_alias = researchsubject.integer_id_alias INNER JOIN subject_researchsubject AS subject_researchsubject ON researchsubject.integer_id_alias = subject_researchsubject.researchsubject_alias WHERE treatment_alias IN (SELECT integer_id_alias FROM treatment_id_preselect_0)), subject_researchsubject_id_preselect_1_0 AS (SELECT subject_alias FROM subject_researchsubject WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_0)), subject_researchsubject_id_preselect_1_1 AS (SELECT subject_alias FROM subject_researchsubject WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_1)), subject_preselect_ids AS (SELECT subject_alias  FROM subject_treatment_id_preselect_0  UNION  (SELECT subject_alias  FROM subject_researchsubject_id_preselect_1_0  UNION  SELECT subject_alias  FROM subject_researchsubject_id_preselect_1_1)), subject_preselect AS (SELECT DISTINCT subject.integer_id_alias AS subject_alias, id, subject_identifier.system, sex, race, ethnicity, cause_of_death FROM subject, subject_identifier WHERE integer_id_alias IN (SELECT subject_alias FROM subject_preselect_ids)AND integer_id_alias = subject_identifier.subject_alias), subject_identifier_system_count AS (SELECT row_to_json(subquery) AS json_subject_identifier_system FROM (SELECT system, COUNT(subject_alias) AS count FROM subject_preselect GROUP BY system) AS subquery),sex_count AS (SELECT row_to_json(subquery) AS json_sex FROM (SELECT sex, COUNT(subject_alias) AS count FROM subject_preselect GROUP BY sex) AS subquery),race_count AS (SELECT row_to_json(subquery) AS json_race FROM (SELECT race, COUNT(subject_alias) AS count FROM subject_preselect GROUP BY race) AS subquery),ethnicity_count AS (SELECT row_to_json(subquery) AS json_ethnicity FROM (SELECT ethnicity, COUNT(subject_alias) AS count FROM subject_preselect GROUP BY ethnicity) AS subquery),cause_of_death_count AS (SELECT row_to_json(subquery) AS json_cause_of_death FROM (SELECT cause_of_death, COUNT(subject_alias) AS count FROM subject_preselect GROUP BY cause_of_death) AS subquery) SELECT (SELECT COUNT(id) FROM subject_preselect) AS subject_id,(SELECT array_agg(json_subject_identifier_system) FROM subject_identifier_system_count) AS subject_identifier_system,(SELECT array_agg(json_sex) FROM sex_count) AS sex,(SELECT array_agg(json_race) FROM race_count) AS race,(SELECT array_agg(json_ethnicity) FROM ethnicity_count) AS ethnicity,(SELECT array_agg(json_cause_of_death) FROM cause_of_death_count) AS cause_of_death) as json";
//    Filter filterObj = new Filter(sqlOg, subjectSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }
  /**
   * This tests the filters Class query optimization for the researchsubject count query
   */
//  @Test
//  void TestResearchSubjectCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT researchsubject.id AS researchsubject_id, file_subject.file_alias AS file_id, researchsubject_identifier.system AS researchsubject_identifier_system, researchsubject.primary_diagnosis_condition AS primary_diagnosis_condition, researchsubject.primary_diagnosis_site AS primary_diagnosis_site FROM researchsubject AS researchsubject  LEFT JOIN researchsubject_treatment AS researchsubject_treatment ON researchsubject.integer_id_alias = researchsubject_treatment.researchsubject_alias  LEFT JOIN treatment AS treatment ON researchsubject_treatment.treatment_alias = treatment.integer_id_alias  INNER JOIN subject_researchsubject AS subject_researchsubject ON researchsubject.integer_id_alias = subject_researchsubject.researchsubject_alias  LEFT JOIN subject AS subject ON subject_researchsubject.subject_alias = subject.integer_id_alias  LEFT JOIN file_subject AS file_subject ON subject.integer_id_alias = file_subject.subject_alias  INNER JOIN researchsubject_identifier AS researchsubject_identifier ON researchsubject.integer_id_alias = researchsubject_identifier.researchsubject_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), researchsubject_identifier_system_count as (SELECT row_to_json(subq) AS json_researchsubject_identifier_system FROM (select researchsubject_identifier_system as researchsubject_identifier_system, count(distinct researchsubject_id) as count from flattened_result group by researchsubject_identifier_system) as subq), primary_diagnosis_condition_count as (SELECT row_to_json(subq) AS json_primary_diagnosis_condition FROM (select primary_diagnosis_condition as primary_diagnosis_condition, count(distinct researchsubject_id) as count from flattened_result group by primary_diagnosis_condition) as subq), primary_diagnosis_site_count as (SELECT row_to_json(subq) AS json_primary_diagnosis_site FROM (select primary_diagnosis_site as primary_diagnosis_site, count(distinct researchsubject_id) as count from flattened_result group by primary_diagnosis_site) as subq)  select (SELECT COUNT(DISTINCT researchsubject_id) from flattened_result) as researchsubject_id, (SELECT COUNT(DISTINCT file_id) from flattened_result) as file_id, (SELECT array_agg(json_researchsubject_identifier_system) from researchsubject_identifier_system_count) as researchsubject_identifier_system, (SELECT array_agg(json_primary_diagnosis_condition) from primary_diagnosis_condition_count) as primary_diagnosis_condition, (SELECT array_agg(json_primary_diagnosis_site) from primary_diagnosis_site_count) as primary_diagnosis_site) AS json";
//    ResearchSubjectCountSqlGenerator researchSubjectSqlCountGenerator = new ResearchSubjectCountSqlGenerator(query, false);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), researchsubject_treatment_id_preselect_0 AS (SELECT researchsubject_alias FROM researchsubject_treatment WHERE treatment_alias IN (SELECT integer_id_alias FROM treatment_id_preselect_0)), researchsubject_preselect_ids AS (SELECT researchsubject_alias  FROM researchsubject_treatment_id_preselect_0  UNION  (SELECT integer_id_alias AS researchsubject_alias FROM researchsubject_id_preselect_1_0  UNION  SELECT integer_id_alias AS researchsubject_alias FROM researchsubject_id_preselect_1_1)), researchsubject_preselect AS (SELECT DISTINCT researchsubject.integer_id_alias AS researchsubject_alias, id, researchsubject_identifier.system, primary_diagnosis_condition, primary_diagnosis_site FROM researchsubject, researchsubject_identifier WHERE integer_id_alias IN (SELECT researchsubject_alias FROM researchsubject_preselect_ids)AND integer_id_alias = researchsubject_identifier.researchsubject_alias), researchsubject_file_alias AS (SELECT file_mapping.subject_alias FROM subject_researchsubject file_mapping, researchsubject_preselect entity_preselect WHERE file_mapping.researchsubject_alias = entity_preselect.researchsubject_alias),researchsubject_identifier_system_count AS (SELECT row_to_json(subquery) AS json_researchsubject_identifier_system FROM (SELECT system, COUNT(researchsubject_alias) AS count FROM researchsubject_preselect GROUP BY system) AS subquery),primary_diagnosis_condition_count AS (SELECT row_to_json(subquery) AS json_primary_diagnosis_condition FROM (SELECT primary_diagnosis_condition, COUNT(researchsubject_alias) AS count FROM researchsubject_preselect GROUP BY primary_diagnosis_condition) AS subquery),primary_diagnosis_site_count AS (SELECT row_to_json(subquery) AS json_primary_diagnosis_site FROM (SELECT primary_diagnosis_site, COUNT(researchsubject_alias) AS count FROM researchsubject_preselect GROUP BY primary_diagnosis_site) AS subquery) SELECT (SELECT COUNT(id) FROM researchsubject_preselect) AS researchsubject_id,(SELECT COUNT(DISTINCT(file_mapping.file_alias)) FROM researchsubject_file_alias file_preselect, file_subject file_mapping WHERE file_mapping.subject_alias = file_preselect.subject_alias) AS file_id,(SELECT array_agg(json_researchsubject_identifier_system) FROM researchsubject_identifier_system_count) AS researchsubject_identifier_system,(SELECT array_agg(json_primary_diagnosis_condition) FROM primary_diagnosis_condition_count) AS primary_diagnosis_condition,(SELECT array_agg(json_primary_diagnosis_site) FROM primary_diagnosis_site_count) AS primary_diagnosis_site) as json";
//    Filter filterObj = new Filter(sqlOg, researchSubjectSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }
  /**
   * This tests the filters Class query optimization for the specimen count query
   */
//  @Test
//  void TestSpecimenCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT specimen.id AS specimen_id, file_specimen.file_alias AS file_id, specimen_identifier.system AS specimen_identifier_system, specimen.primary_disease_type AS primary_disease_type, specimen.source_material_type AS source_material_type, specimen.specimen_type AS specimen_type FROM specimen AS specimen  LEFT JOIN researchsubject_specimen AS researchsubject_specimen ON specimen.integer_id_alias = researchsubject_specimen.specimen_alias  LEFT JOIN researchsubject AS researchsubject ON researchsubject_specimen.researchsubject_alias = researchsubject.integer_id_alias  LEFT JOIN researchsubject_treatment AS researchsubject_treatment ON researchsubject.integer_id_alias = researchsubject_treatment.researchsubject_alias  LEFT JOIN treatment AS treatment ON researchsubject_treatment.treatment_alias = treatment.integer_id_alias  INNER JOIN file_specimen AS file_specimen ON specimen.integer_id_alias = file_specimen.specimen_alias  INNER JOIN specimen_identifier AS specimen_identifier ON specimen.integer_id_alias = specimen_identifier.specimen_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), specimen_identifier_system_count as (SELECT row_to_json(subq) AS json_specimen_identifier_system FROM (select specimen_identifier_system as specimen_identifier_system, count(distinct specimen_id) as count from flattened_result group by specimen_identifier_system) as subq), primary_disease_type_count as (SELECT row_to_json(subq) AS json_primary_disease_type FROM (select primary_disease_type as primary_disease_type, count(distinct specimen_id) as count from flattened_result group by primary_disease_type) as subq), source_material_type_count as (SELECT row_to_json(subq) AS json_source_material_type FROM (select source_material_type as source_material_type, count(distinct specimen_id) as count from flattened_result group by source_material_type) as subq), specimen_type_count as (SELECT row_to_json(subq) AS json_specimen_type FROM (select specimen_type as specimen_type, count(distinct specimen_id) as count from flattened_result group by specimen_type) as subq)  select (SELECT COUNT(DISTINCT specimen_id) from flattened_result) as specimen_id, (SELECT COUNT(DISTINCT file_id) from flattened_result) as file_id, (SELECT array_agg(json_specimen_identifier_system) from specimen_identifier_system_count) as specimen_identifier_system, (SELECT array_agg(json_primary_disease_type) from primary_disease_type_count) as primary_disease_type, (SELECT array_agg(json_source_material_type) from source_material_type_count) as source_material_type, (SELECT array_agg(json_specimen_type) from specimen_type_count) as specimen_type) AS json";
//    SpecimenCountSqlGenerator specimenSqlCountGenerator = new SpecimenCountSqlGenerator(query, false);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), specimen_treatment_id_preselect_0 AS (SELECT specimen_alias FROM treatment AS treatment  INNER JOIN researchsubject_treatment AS researchsubject_treatment ON treatment.integer_id_alias = researchsubject_treatment.treatment_alias INNER JOIN researchsubject AS researchsubject ON researchsubject_treatment.researchsubject_alias = researchsubject.integer_id_alias INNER JOIN researchsubject_specimen AS researchsubject_specimen ON researchsubject.integer_id_alias = researchsubject_specimen.researchsubject_alias WHERE treatment_alias IN (SELECT integer_id_alias FROM treatment_id_preselect_0)), researchsubject_specimen_id_preselect_1_0 AS (SELECT specimen_alias FROM researchsubject_specimen WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_0)), researchsubject_specimen_id_preselect_1_1 AS (SELECT specimen_alias FROM researchsubject_specimen WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_1)), specimen_preselect_ids AS (SELECT specimen_alias  FROM specimen_treatment_id_preselect_0  UNION  (SELECT specimen_alias  FROM researchsubject_specimen_id_preselect_1_0  UNION  SELECT specimen_alias  FROM researchsubject_specimen_id_preselect_1_1)), specimen_preselect AS (SELECT DISTINCT specimen.integer_id_alias AS specimen_alias, id, specimen_identifier.system, primary_disease_type, source_material_type, specimen_type FROM specimen, specimen_identifier WHERE integer_id_alias IN (SELECT specimen_alias FROM specimen_preselect_ids)AND integer_id_alias = specimen_identifier.specimen_alias), specimen_identifier_system_count AS (SELECT row_to_json(subquery) AS json_specimen_identifier_system FROM (SELECT system, COUNT(specimen_alias) AS count FROM specimen_preselect GROUP BY system) AS subquery),primary_disease_type_count AS (SELECT row_to_json(subquery) AS json_primary_disease_type FROM (SELECT primary_disease_type, COUNT(specimen_alias) AS count FROM specimen_preselect GROUP BY primary_disease_type) AS subquery),source_material_type_count AS (SELECT row_to_json(subquery) AS json_source_material_type FROM (SELECT source_material_type, COUNT(specimen_alias) AS count FROM specimen_preselect GROUP BY source_material_type) AS subquery),specimen_type_count AS (SELECT row_to_json(subquery) AS json_specimen_type FROM (SELECT specimen_type, COUNT(specimen_alias) AS count FROM specimen_preselect GROUP BY specimen_type) AS subquery) SELECT (SELECT COUNT(id) FROM specimen_preselect) AS specimen_id,(SELECT array_agg(json_specimen_identifier_system) FROM specimen_identifier_system_count) AS specimen_identifier_system,(SELECT array_agg(json_primary_disease_type) FROM primary_disease_type_count) AS primary_disease_type,(SELECT array_agg(json_source_material_type) FROM source_material_type_count) AS source_material_type,(SELECT array_agg(json_specimen_type) FROM specimen_type_count) AS specimen_type) as json";
//    Filter filterObj = new Filter(sqlOg, specimenSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }
  /**
   * This tests the filters Class query optimization for the diagnosis count query
   */
//  @Test
//  void TestDiagnosisCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT diagnosis.id AS diagnosis_id, diagnosis_identifier.system AS diagnosis_identifier_system, diagnosis.primary_diagnosis AS primary_diagnosis, diagnosis.stage AS stage, diagnosis.grade AS grade FROM diagnosis AS diagnosis  LEFT JOIN diagnosis_treatment AS diagnosis_treatment ON diagnosis.integer_id_alias = diagnosis_treatment.diagnosis_alias  LEFT JOIN treatment AS treatment ON diagnosis_treatment.treatment_alias = treatment.integer_id_alias  LEFT JOIN researchsubject_diagnosis AS researchsubject_diagnosis ON diagnosis.integer_id_alias = researchsubject_diagnosis.diagnosis_alias  LEFT JOIN researchsubject AS researchsubject ON researchsubject_diagnosis.researchsubject_alias = researchsubject.integer_id_alias  INNER JOIN diagnosis_identifier AS diagnosis_identifier ON diagnosis.integer_id_alias = diagnosis_identifier.diagnosis_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), diagnosis_identifier_system_count as (SELECT row_to_json(subq) AS json_diagnosis_identifier_system FROM (select diagnosis_identifier_system as diagnosis_identifier_system, count(distinct diagnosis_id) as count from flattened_result group by diagnosis_identifier_system) as subq), primary_diagnosis_count as (SELECT row_to_json(subq) AS json_primary_diagnosis FROM (select primary_diagnosis as primary_diagnosis, count(distinct diagnosis_id) as count from flattened_result group by primary_diagnosis) as subq), stage_count as (SELECT row_to_json(subq) AS json_stage FROM (select stage as stage, count(distinct diagnosis_id) as count from flattened_result group by stage) as subq), grade_count as (SELECT row_to_json(subq) AS json_grade FROM (select grade as grade, count(distinct diagnosis_id) as count from flattened_result group by grade) as subq)  select (SELECT COUNT(DISTINCT diagnosis_id) from flattened_result) as diagnosis_id, (SELECT array_agg(json_diagnosis_identifier_system) from diagnosis_identifier_system_count) as diagnosis_identifier_system, (SELECT array_agg(json_primary_diagnosis) from primary_diagnosis_count) as primary_diagnosis, (SELECT array_agg(json_stage) from stage_count) as stage, (SELECT array_agg(json_grade) from grade_count) as grade) AS json";
//    DiagnosisCountSqlGenerator diagnosisSqlCountGenerator = new DiagnosisCountSqlGenerator(query);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), diagnosis_treatment_id_preselect_0 AS (SELECT diagnosis_alias FROM diagnosis_treatment WHERE treatment_alias IN (SELECT integer_id_alias FROM treatment_id_preselect_0)), researchsubject_diagnosis_id_preselect_1_0 AS (SELECT diagnosis_alias FROM researchsubject_diagnosis WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_0)), researchsubject_diagnosis_id_preselect_1_1 AS (SELECT diagnosis_alias FROM researchsubject_diagnosis WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_1)), diagnosis_preselect_ids AS (SELECT diagnosis_alias  FROM diagnosis_treatment_id_preselect_0  UNION  (SELECT diagnosis_alias  FROM researchsubject_diagnosis_id_preselect_1_0  UNION  SELECT diagnosis_alias  FROM researchsubject_diagnosis_id_preselect_1_1)), diagnosis_preselect AS (SELECT DISTINCT diagnosis.integer_id_alias AS diagnosis_alias, id, diagnosis_identifier.system, primary_diagnosis, stage, grade FROM diagnosis, diagnosis_identifier WHERE integer_id_alias IN (SELECT diagnosis_alias FROM diagnosis_preselect_ids)AND integer_id_alias = diagnosis_identifier.diagnosis_alias), diagnosis_identifier_system_count AS (SELECT row_to_json(subquery) AS json_diagnosis_identifier_system FROM (SELECT system, COUNT(diagnosis_alias) AS count FROM diagnosis_preselect GROUP BY system) AS subquery),primary_diagnosis_count AS (SELECT row_to_json(subquery) AS json_primary_diagnosis FROM (SELECT primary_diagnosis, COUNT(diagnosis_alias) AS count FROM diagnosis_preselect GROUP BY primary_diagnosis) AS subquery),stage_count AS (SELECT row_to_json(subquery) AS json_stage FROM (SELECT stage, COUNT(diagnosis_alias) AS count FROM diagnosis_preselect GROUP BY stage) AS subquery),grade_count AS (SELECT row_to_json(subquery) AS json_grade FROM (SELECT grade, COUNT(diagnosis_alias) AS count FROM diagnosis_preselect GROUP BY grade) AS subquery) SELECT (SELECT COUNT(id) FROM diagnosis_preselect) AS diagnosis_id,(SELECT array_agg(json_diagnosis_identifier_system) FROM diagnosis_identifier_system_count) AS diagnosis_identifier_system,(SELECT array_agg(json_primary_diagnosis) FROM primary_diagnosis_count) AS primary_diagnosis,(SELECT array_agg(json_stage) FROM stage_count) AS stage,(SELECT array_agg(json_grade) FROM grade_count) AS grade) as json";
//    Filter filterObj = new Filter(sqlOg, diagnosisSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }
  /**
   * This tests the filters Class query optimization for the treatment count query
   */
//  @Test
//  void TestTreatmentCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT treatment.id AS treatment_id, treatment_identifier.system AS treatment_identifier_system, treatment.treatment_type AS treatment_type, treatment.treatment_effect AS treatment_effect FROM treatment AS treatment  LEFT JOIN researchsubject_treatment AS researchsubject_treatment ON treatment.integer_id_alias = researchsubject_treatment.treatment_alias  LEFT JOIN researchsubject AS researchsubject ON researchsubject_treatment.researchsubject_alias = researchsubject.integer_id_alias  INNER JOIN treatment_identifier AS treatment_identifier ON treatment.integer_id_alias = treatment_identifier.treatment_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), treatment_identifier_system_count as (SELECT row_to_json(subq) AS json_treatment_identifier_system FROM (select treatment_identifier_system as treatment_identifier_system, count(distinct treatment_id) as count from flattened_result group by treatment_identifier_system) as subq), treatment_type_count as (SELECT row_to_json(subq) AS json_treatment_type FROM (select treatment_type as treatment_type, count(distinct treatment_id) as count from flattened_result group by treatment_type) as subq), treatment_effect_count as (SELECT row_to_json(subq) AS json_treatment_effect FROM (select treatment_effect as treatment_effect, count(distinct treatment_id) as count from flattened_result group by treatment_effect) as subq)  select (SELECT COUNT(DISTINCT treatment_id) from flattened_result) as treatment_id, (SELECT array_agg(json_treatment_identifier_system) from treatment_identifier_system_count) as treatment_identifier_system, (SELECT array_agg(json_treatment_type) from treatment_type_count) as treatment_type, (SELECT array_agg(json_treatment_effect) from treatment_effect_count) as treatment_effect) AS json";
//    TreatmentCountSqlGenerator treatmentSqlCountGenerator = new TreatmentCountSqlGenerator(query);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), researchsubject_treatment_id_preselect_1_0 AS (SELECT treatment_alias FROM researchsubject_treatment WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_0)), researchsubject_treatment_id_preselect_1_1 AS (SELECT treatment_alias FROM researchsubject_treatment WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_1)), treatment_preselect_ids AS (SELECT integer_id_alias AS treatment_alias FROM treatment_id_preselect_0  UNION  (SELECT treatment_alias  FROM researchsubject_treatment_id_preselect_1_0  UNION  SELECT treatment_alias  FROM researchsubject_treatment_id_preselect_1_1)), treatment_preselect AS (SELECT DISTINCT treatment.integer_id_alias AS treatment_alias, id, treatment_identifier.system, treatment_type, treatment_effect FROM treatment, treatment_identifier WHERE integer_id_alias IN (SELECT treatment_alias FROM treatment_preselect_ids)AND integer_id_alias = treatment_identifier.treatment_alias), treatment_identifier_system_count AS (SELECT row_to_json(subquery) AS json_treatment_identifier_system FROM (SELECT system, COUNT(treatment_alias) AS count FROM treatment_preselect GROUP BY system) AS subquery),treatment_type_count AS (SELECT row_to_json(subquery) AS json_treatment_type FROM (SELECT treatment_type, COUNT(treatment_alias) AS count FROM treatment_preselect GROUP BY treatment_type) AS subquery),treatment_effect_count AS (SELECT row_to_json(subquery) AS json_treatment_effect FROM (SELECT treatment_effect, COUNT(treatment_alias) AS count FROM treatment_preselect GROUP BY treatment_effect) AS subquery) SELECT (SELECT COUNT(id) FROM treatment_preselect) AS treatment_id,(SELECT array_agg(json_treatment_identifier_system) FROM treatment_identifier_system_count) AS treatment_identifier_system,(SELECT array_agg(json_treatment_type) FROM treatment_type_count) AS treatment_type,(SELECT array_agg(json_treatment_effect) FROM treatment_effect_count) AS treatment_effect) as json";
//    Filter filterObj = new Filter(sqlOg, treatmentSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }
  /**
   * This tests the filters Class query optimization for the treatment count query
   */
//  @Test
//  void TestFileCountQuery() {
//    String sqlOg = "SELECT row_to_json(json) FROM (WITH flattened_result as (SELECT file.id AS file_id, file.data_category AS data_category, file.data_type AS data_type, file_identifier.system AS file_identifier_system, file.file_format AS file_format FROM file AS file  LEFT JOIN file_subject AS file_subject ON file.integer_id_alias = file_subject.file_alias  LEFT JOIN subject AS subject ON file_subject.subject_alias = subject.integer_id_alias  LEFT JOIN subject_researchsubject AS subject_researchsubject ON subject.integer_id_alias = subject_researchsubject.subject_alias  LEFT JOIN researchsubject AS researchsubject ON subject_researchsubject.researchsubject_alias = researchsubject.integer_id_alias  LEFT JOIN researchsubject_treatment AS researchsubject_treatment ON researchsubject.integer_id_alias = researchsubject_treatment.researchsubject_alias  LEFT JOIN treatment AS treatment ON researchsubject_treatment.treatment_alias = treatment.integer_id_alias  INNER JOIN file_identifier AS file_identifier ON file.integer_id_alias = file_identifier.file_alias WHERE ((COALESCE(UPPER(treatment.treatment_anatomic_site), '') = UPPER(:parameter_1)) OR ((COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_2)) OR (COALESCE(UPPER(researchsubject.primary_diagnosis_site), '') LIKE UPPER(:parameter_3))))), data_category_count as (SELECT row_to_json(subq) AS json_data_category FROM (select data_category as data_category, count(distinct file_id) as count from flattened_result group by data_category) as subq), data_type_count as (SELECT row_to_json(subq) AS json_data_type FROM (select data_type as data_type, count(distinct file_id) as count from flattened_result group by data_type) as subq), file_identifier_system_count as (SELECT row_to_json(subq) AS json_file_identifier_system FROM (select file_identifier_system as file_identifier_system, count(distinct file_id) as count from flattened_result group by file_identifier_system) as subq), file_format_count as (SELECT row_to_json(subq) AS json_file_format FROM (select file_format as file_format, count(distinct file_id) as count from flattened_result group by file_format) as subq)  select (SELECT COUNT(DISTINCT file_id) from flattened_result) as file_id, (SELECT array_agg(json_data_category) from data_category_count) as data_category, (SELECT array_agg(json_data_type) from data_type_count) as data_type, (SELECT array_agg(json_file_identifier_system) from file_identifier_system_count) as file_identifier_system, (SELECT array_agg(json_file_format) from file_format_count) as file_format) AS json";
//    SubjectCountSqlGenerator fileSqlCountGenerator = new SubjectCountSqlGenerator(query, true);
//    String expected = "SELECT row_to_json(json) FROM (WITH treatment_id_preselect_0 AS (SELECT integer_id_alias FROM treatment WHERE (COALESCE(UPPER(treatment_anatomic_site), '') = UPPER(:parameter_1))), researchsubject_id_preselect_1_0 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_2))), researchsubject_id_preselect_1_1 AS (SELECT integer_id_alias FROM researchsubject WHERE (COALESCE(UPPER(primary_diagnosis_site), '') LIKE UPPER(:parameter_3))), file_treatment_id_preselect_0 AS (SELECT file_alias FROM treatment AS treatment  INNER JOIN researchsubject_treatment AS researchsubject_treatment ON treatment.integer_id_alias = researchsubject_treatment.treatment_alias INNER JOIN researchsubject AS researchsubject ON researchsubject_treatment.researchsubject_alias = researchsubject.integer_id_alias INNER JOIN subject_researchsubject AS subject_researchsubject ON researchsubject.integer_id_alias = subject_researchsubject.researchsubject_alias INNER JOIN subject AS subject ON subject_researchsubject.subject_alias = subject.integer_id_alias INNER JOIN file_subject AS file_subject ON subject.integer_id_alias = file_subject.subject_alias WHERE treatment_alias IN (SELECT integer_id_alias FROM treatment_id_preselect_0)), file_researchsubject_id_preselect_1_0 AS (SELECT file_alias FROM researchsubject AS researchsubject  INNER JOIN subject_researchsubject AS subject_researchsubject ON researchsubject.integer_id_alias = subject_researchsubject.researchsubject_alias INNER JOIN subject AS subject ON subject_researchsubject.subject_alias = subject.integer_id_alias INNER JOIN file_subject AS file_subject ON subject.integer_id_alias = file_subject.subject_alias WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_0)), file_researchsubject_id_preselect_1_1 AS (SELECT file_alias FROM researchsubject AS researchsubject  INNER JOIN subject_researchsubject AS subject_researchsubject ON researchsubject.integer_id_alias = subject_researchsubject.researchsubject_alias INNER JOIN subject AS subject ON subject_researchsubject.subject_alias = subject.integer_id_alias INNER JOIN file_subject AS file_subject ON subject.integer_id_alias = file_subject.subject_alias WHERE researchsubject_alias IN (SELECT integer_id_alias FROM researchsubject_id_preselect_1_1)), file_preselect_ids AS (SELECT file_alias  FROM file_treatment_id_preselect_0  UNION  (SELECT file_alias  FROM file_researchsubject_id_preselect_1_0  UNION  SELECT file_alias  FROM file_researchsubject_id_preselect_1_1)), file_preselect AS (SELECT DISTINCT file.integer_id_alias AS file_alias, id, data_category, data_type, file_identifier.system, file_format FROM file, file_identifier WHERE integer_id_alias IN (SELECT file_alias FROM file_preselect_ids)AND integer_id_alias = file_identifier.file_alias), data_category_count AS (SELECT row_to_json(subquery) AS json_data_category FROM (SELECT data_category, COUNT(file_alias) AS count FROM file_preselect GROUP BY data_category) AS subquery),data_type_count AS (SELECT row_to_json(subquery) AS json_data_type FROM (SELECT data_type, COUNT(file_alias) AS count FROM file_preselect GROUP BY data_type) AS subquery),file_identifier_system_count AS (SELECT row_to_json(subquery) AS json_file_identifier_system FROM (SELECT system, COUNT(file_alias) AS count FROM file_preselect GROUP BY system) AS subquery),file_format_count AS (SELECT row_to_json(subquery) AS json_file_format FROM (SELECT file_format, COUNT(file_alias) AS count FROM file_preselect GROUP BY file_format) AS subquery) SELECT (SELECT COUNT(id) FROM file_preselect) AS file_id,(SELECT array_agg(json_data_category) FROM data_category_count) AS data_category,(SELECT array_agg(json_data_type) FROM data_type_count) AS data_type,(SELECT array_agg(json_file_identifier_system) FROM file_identifier_system_count) AS file_identifier_system,(SELECT array_agg(json_file_format) FROM file_format_count) AS file_format) as json";
//    Filter filterObj = new Filter(sqlOg, fileSqlCountGenerator);
//    assertThat(filterObj.getCountEndpointQuery(), equalTo(expected));
//  }


}