openapi: 3.0.3
info:
  description: API definition for the CDA
  version: 1.0.1
  title: CDA API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: http://localhost:8080
  - url: https://cda.cda-dev.broadinstitute.org

tags:
  - name: query
    description: Retrieve the data stored in the CDA.
  - name: meta
    description: Retrieve meta information about CDA data or CDA itself

paths:
  /status:
    get:
      summary: CDA status
      description: Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - meta
      responses:
        200:
          $ref: '#/components/responses/StatusResponse'
        500:
          $ref: '#/components/responses/StatusResponse'


  /api/v1/dataset-description/latest:
    get:
      summary: Description of latest dataset
      description: Return data model and release notes for latest release.
      operationId: latestReleaseNotes
      tags:
        - meta
      responses:
        200:
          description: Latest dataset description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDescription'


  /api/v1/dataset-description/all:
    get:
      summary: List descriptions of all available datasets
      description: Return data model and release notes of all releases.
      operationId: allReleaseNotes
      tags:
        - meta
      responses:
        200:
          description: List of dataset descriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetDescription'


  /api/v1/bulk-data/{version}:
    get:
      summary: Return all data in CDA
      description: Return all data in CDA
      operationId: bulkData
      tags:
        - query
      parameters:
        - $ref: '#/components/parameters/DatasetVersion'
        - $ref: '#/components/parameters/ResultOffset'
        - $ref: '#/components/parameters/ResultLimit'

      responses:
        200:
          $ref: '#/components/responses/QueryResponse'


  /api/v1/boolean-query/{version}:
    post:
      summary: Execute boolean query 
      description: |
        Execute a query composed of conditions on columns combined with boolean operators 
      operationId: booleanQuery
      tags:
        - query

      parameters:
        - $ref: '#/components/parameters/DatasetVersion'
        - $ref: '#/components/parameters/ResultOffset'
        - $ref: '#/components/parameters/ResultLimit'
        - in: query
          description: If true, don't run the query, only generate and return it.
          name: dryRun
          schema:
            type: boolean
            default: false

      requestBody:
        description: The boolean query
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
                    
      responses:
        200:
          $ref: '#/components/responses/QueryResponse'


  /api/v1/sql-query/{version}:
    post:
      summary: Execute SQL directly on a version of the dataset
      operationId: sqlQuery
      tags:
        - query

      parameters:
        - $ref: '#/components/parameters/DatasetVersion'
        - $ref: '#/components/parameters/ResultOffset'
        - $ref: '#/components/parameters/ResultLimit'

      requestBody:
        description: BigQuery SQL to run on data table
        required: true
        content:
          text/plain:
            schema:
              type: string
                    
      responses:
        200:
          $ref: '#/components/responses/QueryResponse'


components:

  parameters:
    DatasetVersion:
      in: path
      name: version
      required: true
      schema:
        type: string
      description: Dataset version
    ResultOffset:
      in: query
      name: offset
      schema:
        type: integer
      description: The number of entries to skip
    ResultLimit:
      in: query
      name: limit
      schema:
        type: integer
      description: The numbers of entries to return          


  schemas:

    ErrorReport:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    SystemStatus:
      type: object
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    QueryResponseData:
      type: object
      properties:
        query_sql:
          type: string
        result:
          type: array
          items:
            type: object
        previous_url:
          type: string
        next_url:
          type: string

    DatasetDescription:
      type: object
      properties:
        release-date:
          $ref: '#/components/schemas/DateType'
        cda-version:
          type: string
        cda-model:
          $ref: '#/components/schemas/Model'
        notes:
          type: string
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/DatasetInfo'

    DateType:
      type: string
      format: date-time

    DatasetInfo:
      type: object
      properties:
        source:
          type: string
        version:
          type: string
        date:
          $ref: '#/components/schemas/DateType'

    Model:
      type: object
      properties:
        version:
          type: string
        date:
          $ref: '#/components/schemas/DateType'
        model:
          type: object
          properties: {}

    Query:
      type: object
      description: |
        Queries are built up of operators flanked by columns, values or further
        queries.
        
        For example, the query "age < 50" (where age is a column name and not a
        value) is expressed as:

        A query's contents depends on its node type:

        column, quoted, unquoted - only `value` is used
        >=, <=, <, >, =, ~, AND, OR, SUBQUERY - only `l` and `r` are used
        NOT - only `l` is used

        SUBQUERY supports sub-queries. `l` is run as a query on the results of `r`.

          ```
          node_type: "<",
          l:
            node_type: column
            value: age
          r:
            node_type: unquoted
            value: 50
          ```

      properties:
        node_type:
          type: string
          enum: ["column", "quoted", "unquoted", ">=", "<=", "<", ">", "=", "~", "AND", "OR", "NOT",
          "SUBQUERY"]
        value:
          type: string
        l:
          $ref: '#/components/schemas/Query' 
        r:
          $ref: '#/components/schemas/Query' 

  responses:

    StatusResponse:
      description: common status response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    QueryResponse:
      description: common query response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryResponseData'
