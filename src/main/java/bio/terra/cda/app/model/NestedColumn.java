package bio.terra.cda.app.model;

/**
 * Table cells that represent as nested structures must be unnested from it decendant heiarchy. the
 * UNNEST clause is generated by unwinding the "dot" hierarchy such that:
 * gdc-bg-sample.cda_mvp.v3.ResearchSubject.identifier.value would unwind to the following. "SELECT
 * DISTINCT (_D.value) FROM gdc-bq-sample.cda_mvp.v3, UNNEST(ResearchSubject) as _C,
 * UNNEST(_C.identifier) AS _D";
 */
public class NestedColumn {
  private String column;
  private String unnestClause;

  public NestedColumn(String columnName) {
    String[] c = columnName.split("\\.");
    generateUnnestClause(columnName);
  }

  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }

  public String getUnnestClause() {
    return unnestClause;
  }

  public void setUnnestClause(String unnestClause) {
    this.unnestClause = unnestClause;
  }

  // column ->
  // SELECT DISTINCT(column)

  // D.column ->
  // SELECT DISTINCT(_D.column) FROM TABLE, UNNEST(D) AS _D

  // A.B.C.D.column ->
  // # SELECT DISTINCT(_D.column) FROM TABLE, UNNEST(A) AS _A, UNNEST(_A.B) AS _B, UNNEST(_B.C) AS
  // _C, UNNEST(_C.D) AS _D
  private void generateUnnestClause(String columnName) {
    String unnestClause = null;
    String newColumn = null;
    String[] c = columnName.split("\\.");
    if (c.length > 1) {
      newColumn = "_" + c[c.length - 2] + "." + c[c.length - 1];
      unnestClause = ", UNNEST(" + c[0] + ") AS _" + c[0];
      for (int n = 1; n < c.length - 1; n++) {
        unnestClause += ", UNNEST(_" + c[n - 1] + "." + c[n] + ") AS _" + c[n];
      }
    }
    setColumn(newColumn);
    setUnnestClause(unnestClause);
  }
}
