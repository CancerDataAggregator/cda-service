import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.4.RELEASE")
		classpath("com.google.guava:guava:30.1.1-jre")
	}
	configurations.all {
		resolutionStrategy {
			force 'com.google.guava:guava:30.1.1-jre'
		}
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.google.cloud.tools.jib' version '2.8.0'
	id 'org.openapi.generator' version '6.0.1'
	id 'com.diffplug.spotless' version '5.12.4'
  	id "org.sonarqube" version "3.3"
	id 'jacoco'
	id 'com.srcclr.gradle' version '3.1.12'
}

ext['log4j2.version'] = '2.17.1'

group = 'bio.terra.cda'

version = '3.2.0'
sourceCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
}
sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
	implementation group: 'javax.validation', name: 'validation-api'
	implementation group: 'org.webjars', name: 'swagger-ui', version: '4.14.0'
	implementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.8'
	implementation group: 'com.google.cloud', name: 'google-cloud-bigquery', version: '2.16.1'


	// These dependencies are required to load the logback config file.
	implementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.7'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-logging', version: '1.2.8.RELEASE'

	// These are temporary until the including library catches up with these vulnerability fixes
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.33'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0-rc1'

	// -- OpenAPI CodeGen dependencies --
	implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.1.7'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	implementation 'org.hamcrest:hamcrest-library:2.2'
	// -- --

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
	exclude group: "commons-logging", module: "commons-logging"
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '2.17.1'
		}
	}
}

// OpenAPI Server Generation
// - specify the source and target
// - define the generation
// - define the validation
// - define dependencies to include the generated code

def openapiSourceFile = "${projectDir}/src/main/resources/api/service_openapi.yaml"
def openapiTargetDir = "${buildDir}/generated"
def openapiClientTargetDir = "${buildDir}/generated-client"

openApiGenerate {
	generatorName = "spring"
	inputSpec = "${openapiSourceFile}".toString()
	outputDir = "${openapiTargetDir}".toString()
	packageName = "${group}"
	apiPackage = "${group}.generated.controller"
	modelPackage = "${group}.generated.model"
	configOptions = [
	        interfaceOnly : "true",
			useTags : "true",
			library : "spring-boot",
			dateLibrary : "java8",
			generateApiTests : "false",
			generateApiDocumentation : "false",
			generateModelTests : "false",
			generateModelDocumentation : "false",
			"openApiNullable": "false",
	]
}

task GetSchema(type: Exec){
	commandLine "bq show --schema --format=prettyjson gdc-bq-sample:integration.all_v2_1 > schema.json"
}

task GetFilesSchema(type: Exec){
	commandLine "bq show --schema --format=prettyjson gdc-bq-sample:dev.all_v3_0_Files > all_v3_0_Files.json"
}

task GetSubjectViewSchema(type: Exec){
	commandLine "bq show --schema --format=prettyjson gdc-bq-sample:dev.all_v3_0_subjects_meta > all_v3_0_subjects_meta.json"
}

task buildPythonSdk(type: GenerateTask){
	generatorName = "python"
	packageName = "cda_client"
	inputSpec = "${openapiSourceFile}".toString()
	outputDir = "${openapiClientTargetDir}".toString()
	configOptions = [
			 packageVersion : "12.12.2022"
	]
}

task integrationTest(type: Test) {
    description = 'Integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen { false } // other way: inputs.upToDateWhen { false }

    mustRunAfter test
}

jib {
	from {
		image = 'us.gcr.io/broad-dsp-gcr-public/base/jre:11-distroless'
	}
	container {
		environment = [ 'spring.profiles.active':'dev' ]
	}
}

tasks.register("bootRunLocal") {
	group = "application"
	description = "Runs the Spring Boot application with the local profile"
	doFirst {
		tasks.bootRun.configure {
			systemProperty("spring.profiles.active", "local")
		}
	}
	finalizedBy("bootRun")
}

tasks.register("bootRunDev") {
	group = "application"
	description = "Runs the Spring Boot application with the dev profile"
	doFirst {
		tasks.bootRun.configure {
			systemProperty("spring.profiles.active", "dev")
		}
	}
	finalizedBy("bootRun")
}

check.dependsOn integrationTest

openApiValidate {
	inputSpec = "${openapiSourceFile}".toString()
}

compileJava.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDir "${openapiTargetDir}/src/main/java"
ideaModule.dependsOn tasks.openApiGenerate

// end of OpenAPI Server Generation

test {
	useJUnitPlatform()
}

spotless {
	java {
		// Specify java source file tree to avoid scanning openapi generated code.
		target project.fileTree(project.rootDir) {
			include 'src/**/*.java'
		}
		googleJavaFormat()
	}
}

// Enable publishing a build scan
if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

jacoco {
	toolVersion = "0.8.6"
}

jacocoTestReport {
	reports {
        html.enabled = true
		xml.enabled true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.2
			}
		}
	}
}
test.finalizedBy jacocoTestReport


sonarqube {
  properties {
    property "sonar.projectKey", "CancerDataAggregator_cda-service"
    property "sonar.organization", "cancerdataaggregator"
    property "sonar.host.url", "https://sonarcloud.io"
	property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
	property "sonar.exclusions", "build/generated/**"
  }
}


